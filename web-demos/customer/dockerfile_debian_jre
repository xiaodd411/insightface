#FROM debian:bullseye as builder
FROM debian:bullseye-slim AS builder

# 设置环境变量以禁用交互式配置界面
ENV DEBIAN_FRONTEND=noninteractive

# 设置默认 shell 为 bash
SHELL ["/bin/bash", "-c"]

## 更换镜像源
#RUN sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list
# 使用清华大学镜像源
RUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list

# 清理缓存并更新
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get -y update --fix-missing

#  安装必要的工具和库
RUN apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get -y update  --fix-missing \
    && MAX_ATTEMPTS=3 \
    && ATTEMPT=0 \
    && while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do \
        apt-get install -y --reinstall \
        make build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
        libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev \
        liblzma-dev python3-openssl git libc++1; \
        if [ $? -eq 0 ]; then \
            break; \
        fi; \
        ATTEMPT=$((ATTEMPT + 1)); \
        sleep 5; \
    done \
    && if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then \
        echo "Failed to install packages after $MAX_ATTEMPTS attempts."; \
        exit 1; \
    fi \
    && rm -rf /var/lib/apt/lists/*

# 安装 pyenv
RUN curl https://pyenv.run | bash

# 设置环境变量
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"

# 安装 pyenv 插件
RUN eval "$(pyenv init --path)" \
    && eval "$(pyenv init -)" \
    && eval "$(pyenv virtualenv-init -)" \
    && pyenv install 3.11.9 \
    && pyenv global 3.11.9 \
    && pyenv rehash

# 安装 PyInstaller
RUN pip install pyinstaller

# 安装 Python 依赖
COPY ../../../requirements.txt /app/requirements.txt
# COPY ./requirements.txt /app/requirements.txt

WORKDIR /app

RUN pip install -r requirements.txt

# 将当前目录的内容复制到 /app 目录
COPY ./ /app

# 运行 PyInstaller 打包命令
RUN ["pyinstaller", "--onedir", "--name=insightface", "main.py"]

RUN ["pyinstaller", "--onedir", "--name=scr_arcface", "main_scr_arcface.py"]

# 设置维护者信息
LABEL maintainer="xqhehuo@foxmail.com"

# 使用 Debian 官方基础镜像
FROM debian:bullseye-slim

# 设置维护者信息
LABEL maintainer="xqhehuo@foxmail.com"

# 设置默认 shell 为 bash
SHELL ["/bin/bash", "-c"]

# 从第一阶段（builder）复制 dist 目录到 Nginx 的默认静态文件目录
COPY --from=builder /app/dist /face/
RUN chmod 777 /face/*

# 设置环境变量

ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV TZ=Asia/Shanghai
# 强制Java使用UTF-8编码
ENV JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 -Djava.awt.headless=true"
ENV NO_ALBUMENTATIONS_UPDATE=1


# 使用国内源（优先替换源，确保后续安装使用新源）
RUN sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list && \
    sed -i 's/security.debian.org/mirrors.aliyun.com\/debian-security/g' /etc/apt/sources.list

# 安装基础依赖
RUN apt-get update && apt-get install -y \
    ca-certificates \
    locales \
    tzdata \
    wget \
    libfreetype6 \
    # 安装图形库支持 opencv
    libgl1-mesa-glx \
    # 安装字体包增强字符支持
    fonts-dejavu-core \
    && rm -rf /var/lib/apt/lists/*

# 配置locale
RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen en_US.UTF-8 && \
    dpkg-reconfigure --frontend=noninteractive locales

# 配置时区
RUN ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata

# 将本地的 OpenJDK 8 压缩包复制到容器中的 /tmp 目录
COPY OpenJDK8U-jre_x64_linux_hotspot_8u442b06.tar.gz /tmp/

# 解压 OpenJDK 8 到 /opt 目录
RUN tar -xzvf /tmp/OpenJDK8U-jre_x64_linux_hotspot_8u442b06.tar.gz -C /opt && \
    rm /tmp/OpenJDK8U-jre_x64_linux_hotspot_8u442b06.tar.gz

# 设置 JAVA_HOME 和 PATH 环境变量
ENV JAVA_HOME=/opt/jdk8u442-b06-jre
ENV PATH=$JAVA_HOME/bin:$PATH

# 确保环境变量正确
RUN echo "JAVA_HOME is set to $JAVA_HOME" && \
    echo "PATH is set to $PATH"

# 设置工作目录
WORKDIR /

# 验证 Java 版本
RUN java -version

# 默认启动命令
CMD ["bash"]
